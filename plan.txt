Website:
    - No sign up/sign in for User
    - 
Domain:
    - user: abc.com
    - admin: admin.abc.com (or abc.com/user?)

Priorities:
- Beautiful design

Page design:
    * Navbar:
        + Home Shirts Shorts Shoes My Orders Contact
        + [x] Home Products My Orders Contact
    - Home:
        - Navbar
        - Hero
        - How it works
            1. COD
                3 steps: [you order] -> [shop owner confirm] -> [deliver]
            2. Paypal?
        - Products (See more)
        - About shop
        - Contact
        - Footer
    - Products:
        - Navbar
        - Sort by (not priority)
        - Product list (price, name, img) + view details (+ descr.) + add to order
        - Pagination
        - Footer
    
    - My Orders
        - Items, quantity (add/remove)
        - Checkout => input form popup
        - Footer
    
Functionalities:
User:
    - (UI) can see about Shop, product list (name,price,img,description)
    - (UI) can sort by fields (not priority)
    - (UI) can search product name (not priority)
    - (UI) can add to Orders
    - input phone, email, name:
        -> receive order confirmation by email (or phone) with the ordered items
        -> popup telling user to send money to shop owner with order id + amount => receive 
        -> popup message saying "will receive call in 12h, COD payment"
    - messenger icon => user logs in to message shop owner if have any questions

Admin:
    - Login to portal
    - Can browse the products:
        + UI display product lists just like the client site or,
        + A list without images
    - Add/Edit/Remove products
        - Add: click Add button => show form => upload img, input name, price, description, (category, size, color,...) => submit
        - Edit: click Edit button => show form => edit => submit
    - Reorder products?
    - Edit username/password?
    -----
    - edit the frontend directly using a csv file then deploy the site themselves! (a lot easier)

App flow:
- Admin sbumit new data -> add to DB -> FE loads data from DB

Tech: 
    - React (gatsby?)/Redux for building FE
    - Tailwind css for styling
    - xxx for sending email
    - Messenger API
    - Node for admin backend / admin portal
    - JWT for admin authentication 
    - MongoDB for storing product infos (name, price, image, ...) + admin info (username, password)

Development plan:
    "Build the core first, start small"
    
    Milestones:

     ___________________________________________
    |                                           |
    |                   ADMIN                   |
    |___________________________________________|

    [Setup]
    - Set up boiler plate React (Gatsby) + Node + MongoDB

    [Load one product from server to client]
    - client: /products: load an object {productName: 'Name'} from Node server to React app

    [Design DB - determine columns so that won't have to fix too much later]
    - DB: product table
        - id, price, quantity, image

    [Load one product from DB to client]
    - server: load product name from DB into an object through server

    [Push one product from server to DB]
    - client: load text (product name) from DB to page
    - server:  push {productName: 'a'} to DB

    [Submit new product from client to DB through server]
    - client: /admin: Add button to submit + send POST request from client

    [Implement user authentication]
    - client: /admin: admin page => basic form to login + POST request 
    - server: working user authentication, JWT (without DB)

    [Client loads multiple products from DB]:
    - client: implement map

    ***************************************************************************
    (Now we have a website where admin can login to /admin and can add products (object) to DB and client loads them on page /products)

    [Add products with multiple fields {name, price, description} (without img)]
    - client: Update the POST request body + update mapping in /products
    - server: add new fields to DB

    [Admin add products with multiple fields using a form]
    - client: Make basic form with all fields + pass inputted data from form to submit function
    
    [Display products to admin page]
    - client: loads (map) products from DB through server as list, e.g | 1, name, desc, price

    [Delete products in DB from server]
    - server: implement delete record by id => test it

    [Delete products from /admin page]
    - client: Remove button next to a product => map to unique ID (React?) + send delete request (axios)

    [Edit products in DB from server]
    - server: implement edit record by id

    [Edit products in DB from /admin page]
    - client: Edit button next to product (mapped to unique ID) + popup edit form (or redirect to /edit/id?) + edit request (axios)

    [Add product image]
    - client: implement upload image + update POST request in ADD & EDIT
    - server: insert image into DB for ADD & EDIT

    (Now we have a website where admin can login to /admin and can add/edit/delete products to DB and client loads them on page /products)

    ***************************************************************************

     ___________________________________________
    |                                           |
    |                   USER                    |
    |___________________________________________|
    

    [Detail popup / detail page with add to cart button + quantity +/-]
    - client: for each product, add popup (OR detail page?) showing product description with add to cart button + quantity (load data given unique id)

    [Set up state management on client and define states]
    - client: definte necessary states (products, cart, language) + setup Redux store to store states
            - convert React states (products) to Redux state + update code

    [Update Redux store's state when click add to cart]
    - client: dispatch addToCart action when clicking add to cart

    [Show products with quantity in /myorders]
    - client: map items from redux store to page /myorders

    (On client, now user can add products with quantity to cart see them in /myorders)   
    
    ***************************************************************************
   
    [Display quantity button +/- in /myorders]
    - client: add quantity button next to each item (map to unique id)

    [Update cart state when user clicking on quantity +/-]
    - client: dispatch action clicking +/-

    (On client, now user can update quantity and remove (when qty=0 show Remove) products from cart in /myorders)

    ***************************************************************************

    [Display user info form + Checkout btn]
    - client: name, phone, email form => checkout btn

    [Display confirm popup]
    - client: checkout btn clicked => show popup with {uniqueId}

    [Generate unique order id]
    - client (or server): generate a random string of 10 numbers (unlikely for 2 orders to have the same id)
    
    
    (On client /products, now user can checkout and is shown a popup message: "Admin will call you in 12h and ship to ur address (COD)")

    ***************************************************************************

    (On client /products, now we have skeleton loading for the products)

    ***************************************************************************

    (On client /products, now there's pagination for products)

    ***************************************************************************

    (On client /products, there are now sidebar displaying different categories) [EXTRA]

    ***************************************************************************

    (On client /products, user can sort by name, price, category) [EXTRA]

    ***************************************************************************

    (On client /products, user can search for product name) [EXTRA]

    ***************************************************************************



    (Should now have navbar and footer)

    ***************************************************************************


    (We now have /home)

    ***************************************************************************


    (We now have hero + how it works + product sections in /home)

    ***************************************************************************
    

    
    (Style /home)

    ***************************************************************************


    (Style /products)

    ***************************************************************************

    
    (Style /myorders)

    ***************************************************************************


    (Style navbar and footer)

    ***************************************************************************


    (Style /admin)

    ***************************************************************************

Example:
https://tailwindcomponents.com/component/e-commerce-product-listing-page/landing#
Payment methods: https://7aothuat.com/thanh-toan 
http://aothuatatshop.com/thanh-toan.html

Concerns:
- What if they have a LOT of products, cannot make API calls for all of them
- Security concern => how to make sure only admin can access admin page + DB cannot be corrupted + DB should not lose all data (backup?)