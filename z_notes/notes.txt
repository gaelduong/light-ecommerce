- resolve environment variables
- [x] when admin add product, need to appear on the screen right after (no refresh)
- product model: (id, name, price, image, description, category, quantity, isInStock? )
- redis? (for session and caching)
- IP access list for DB (right now it's everywhere but should change to specific IP address)
- Where to store product images? (MongoDB?)
- async => asyncHandler for routes? Why?
- colored message in terminal
- need to have confirmation message for each message (are you sure to delete?, etc.)
- use throw new error instead of console.log(error) why?
- error handing for each action (what if it doesn't do what is expected to do? e.g remove product but it doesn't)
- request headers for each get,post,put,delete requests?
- proptypes for each component?
- create jwt_access_token using node package 'crypto'
- jwt, refresh token? expire token?
- secure password with mongoose?
- where to store jwt? http only cookie?
- route to handle non existing path (404)
- in Login, Redirect to /admin if already logged in and in admin, redirect to login if not logged in
- while editing, refresh => "are u sure u want to leave, changes have not been applied..."
- not allowed to upload >1mb images
- condition: new/used
- select items (checkboxes in front)
- popup confirm discard, delete,... (when click discard, or hit go back <-)
- save draft for add/edit?
- min/max characters for name,desc,...
- console.error instead of console.log

* 2 ways to access the admin page
1. access /admin route => check if contains valid jwt 
=> if yes, show Admin page
=> if no, redirect to /login

2. login with username and password => submit => server verify credentials with DB
=> if wrong credentials, reject
=> if correct, send back jwt + redirect to /admin

- [x] make new route product detail
- [x] show cover image on product page only
- protected route
- apply promotion to category/individual products (select?)
- create new category
- attributes with varying prices
- pagination in admin
- drag products in admin
- [x] display total number of products
- sort products by ... 
- search products
- [x] same logic for 2 routes: /products and /products_admin => need to refactor
- check if path exist before delete to avoid error
- [x] add multiple images
- [x] fix get for fetching multiple images
- [x] delete multiple images
- [x] edit for multiple images
- [x] change to dynamic number of images instead of 2
- [x] display images in ProductsDisplay? (show 1 + more?)
- need to find a way to ensure consistency between the image files and image paths in db
- [x] extract imagesInput into component
- [] price variation schemas are sketchy, dont feel safe at all
- [] ui to add variations on product edit/add
- [] display variations on product edit

- [x] get product by id
- [x] more than 2 images per product
- [x] refactor imageupload for add
- [x] images component
- [x] css images display horizontally
- [x] click on product img => edit
- [~x] refactor routes functions later
- [x] edit,delete in same col
- [x] make cover photo
- [x] if no photo, displace 1 placeholder


UI: 
MAX NUM VARIATIONS = 2

Price: (input) (if no variations)
OR
enable variations +

variation 1:  name    Color    x
              options Red
                      (add options)
            
variation 2:  name    Color    x
              options Red
                      (add options)

            [add new variation]

Variation list:
    size    color       price
    L        
//
for each variations
    for each options

DB:
price: {
    single_price: 12,
    price_variations: (null) or {
        variations: [
            {
                name: color,
                values: [red,blue]
            },
            {
                name: size,
                values: [L, XL]
            }
        ]
        prices: [
            {color:red,size:L,price:10},
            {color:red,size:L,price:10},
            {color:red,size:L,price:10},
        ]
    }
}

const priceEx = {
            // singlePrice: 12
            multiplePrices: {
               variations: [
                  { name: "storage", values: ["128gb", "256gb"] },
                  { name: "ram", values: ["16gb", "32gb"] }
               ],
               variationPriceList: [
                  { options: ["128gb", "16gb"], price: 11 },
                  { options: ["128gb", "32gb"], price: 20 },
                  { options: ["256gb", "16gb"], price: 14 },
                  { options: ["256gb", "32gb"], price: 25 }
               ]
            }
         };

const priceEx = {
   singlePrice: 12,
   multiplePrices: {
      variations: [
         { name: "color", values: ["red", "blue"] },
         { name: "size", values: ["L", "XL"] }
      ],
      variationPriceList: [
         { options: ["red", "L"], price: 11 },
         { options: ["red", "XL"], price: 20 },
         { options: ["blue", "L"], price: 14 },
         { options: ["blue", "XL"], price: 25 }
      ]
   }
};


/** 
* Paste one or more documents here
*/
{
    "_id": {
        "$oid": "60dcd7262a9c88eabce16001"
    },
    "name": "Test",
    "price":{    
       "singlePrice": 12,
        "multiplePrices": {
        "variations": [
           { "name": "color", "values": ["red", "blue"] },
           { "name": "size", "values": ["L", "XL"] }
        ],
        "variationPriceList": [
           { "color": "red", "size": "L", "price": 11 },
           { "color": "red", "size": "XL", "price": 20 },
           { "color": "blue", "size": "L", "price": 14 },
           { "color": "blue", "size": "XL", "price": 25 }
        ]
     }
    },
    "description":"s",
"category":"A",
"isInStock":true,
"images":[]
   
}


x delete option, cannot delete the first one
x only 2 variations allowed
x price list
x productadd, extract price value to send to server
x cannot have empty fields
x extract variation component
x same for product edit
extract product fields input 
cleaner ui
variation same name = same key error
replace placeholder with nicer img


red => {id:1,red,0}
red,blue => {id:1, red,0}, {id:2,blue,0}

red,blue
large
=> {id:1,red,large,0}, {id:2,blue,large,0}

red,blue,black
large
=> {id:1,red,large,0}, {id:2,blue,large,0}, {id:3,black,large,0}

red,blue,black
large, xlarge
=> {id:1,red,large,0}, {id:2,blue,large,0}, {id:3,black,large,0}
{id:4,red,xlarge,0}, {id:5,blue,xlarge,0}, {id:6,black,xlarge,0}


find all perms 
=> if perm not exist in existingPerms => add perm to list
=> if existingPerm not in perms, remove existingPerm

{1,3}
{a,b}

=> {1,a}, {3,a}, {1,b}, {3,b}

{1,a,0}
{1,b,0}
{3,a,0}
{3,b,0}



variations = 
{ 
    variationName: n1, 
    options: [
    { optionId: k1, value: red },
    { optionId: k2, value: blue }
    ],
    id: key 
},
{ 
    variationName: n2, 
    options: [
    { optionId: k3, value: red },
    { optionId: k4, value: blue }

    ],
    id: key 
}

add/remove option values:
=> generate perms of keys: [[k1,k3],[k1,k4],...]
=> update varationPriceList  

varationPriceList = {
    {options:[k1,k3], price: 21},
    {options:[k1,k4], price: 21},
    {options:[k2,k3], price: 21},
    {options:[k2,k4], price: 21},
}

input has value = varationPriceList(id1,id2)


getIdPairs()
input:
[
    { optionId: k1, value: red },
    { optionId: k2, value: blue }
],
[
    { optionId: k1, value: red },
    { optionId: k2, value: blue }
]

=> 
{options:[k1,k3], price: 0},
{options:[k1,k4], price: 0},
{options:[k2,k3], price: 0},
{options:[k2,k4], price: 0},

{options:[k1,k3], price: 12},
{options:[k2,k3], price: 0},

xdeleteVar, xaddVar, xaddOption, xdeleteOption